import React from 'react';
import { useTheme } from '../context/ThemeContext';
import { useAppContext } from '../context/AppContext';
import UserStats from '../components/UserStats';
import Achievements from '../components/Achievements';
import ThemeSwitcher from '../components/ThemeSwitcher';
import './DashboardPage.css';

const DashboardPage: React.FC = () => {
  const { user, currentRank, userStats, userLogs, userArtifacts } = useAppContext();

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
  const progressToNextRank = userStats?.current_rank_progress || 0;

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userCompetences = [
    { id: 1, name: '–í–µ—Ä–∞ –≤ –¥–µ–ª–æ', level: 3, maxLevel: 5 },
    { id: 2, name: '–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –±–æ–ª—å—à–µ–º—É', level: 4, maxLevel: 5 },
    { id: 3, name: '–û–±—â–µ–Ω–∏–µ', level: 2, maxLevel: 5 },
    { id: 4, name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', level: 5, maxLevel: 5 }
  ];

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π
  const activeMissions = [
    { id: 1, title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ', branch: '–†–µ–∫—Ä—É—Ç–∏–Ω–≥', status: 'completed', xp: 50, mana: 30 },
    { id: 2, title: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã', branch: '–†–µ–∫—Ä—É—Ç–∏–Ω–≥', status: 'in_progress', xp: 30, mana: 20 },
    { id: 3, title: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è', branch: '–†–µ–∫—Ä—É—Ç–∏–Ω–≥', status: 'locked', xp: 100, mana: 50 },
    { id: 4, title: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –æ –∫–æ–º–ø–∞–Ω–∏–∏', branch: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥', status: 'completed', xp: 20, mana: 10 },
    { id: 5, title: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π', branch: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥', status: 'in_progress', xp: 40, mana: 20 }
  ];

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Ü–µ–ª–µ–π
  const upcomingGoals = [
    { id: 1, title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞"', requirement: '500 XP', status: 'active' },
    { id: 2, title: '–î–æ—Å—Ç—É–ø –∫ –º–∏—Å—Å–∏—è–º "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏"', requirement: '–†–∞–Ω–≥ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä', status: 'locked' },
    { id: 3, title: '–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏', requirement: '–†–∞–Ω–≥ –ü–∏–ª–æ—Ç-–∫–∞–Ω–¥–∏–¥–∞—Ç', status: 'locked' }
  ];

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  const leaderboard = [
    { id: 1, name: '–ê–Ω–Ω–∞', rank: '‚òÖ‚òÖ‚òÖ', xp: 300, position: 1 },
    { id: 2, name: '–Æ—Ä–∏–π', rank: '‚òÖ‚òÖ‚òÜ', xp: 290, position: 2 },
    { id: 3, name: '–î–º–∏—Ç—Ä–∏–π', rank: '‚òÖ‚òÖ‚òÜ', xp: 290, position: 3 },
    { id: 4, name: '–ù–∞—Ç–∞–ª—å—è', rank: '‚òÖ‚òÖ', xp: 220, position: 4 },
    { id: 5, name: '–ê–ª–µ–∫—Å–µ–π', rank: '‚òÖ', xp: 190, position: 5 }
  ];

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return '‚úÖ';
      case 'in_progress': return 'üîÑ';
      case 'locked': return 'üîí';
      default: return '‚≠ï';
    }
  };

  const getCompetenceBar = (level: number, maxLevel: number) => {
    const percentage = (level / maxLevel) * 100;
    const filledBars = Math.floor(percentage / 20);
    const bars = '‚ñì'.repeat(filledBars) + '‚ñë'.repeat(5 - filledBars);
    return bars;
  };

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <div className="profile-header">
          <div className="avatar">üë§</div>
          <div className="profile-info">
            <h1>{user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h1>
            <div className="rank-info">
              –†–∞–Ω–≥: "{currentRank?.name}" ‚òÖ
            </div>
            <div className="experience-info">
              –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {user?.experience || 0} XP
            </div>
          </div>
          <div className="resources">
            <div className="mana">üí´ –ú–∞–Ω–∞: {user?.mana || 0}</div>
          </div>
        </div>
      </div>

      <div className="progress-section">
        <div className="goal-info">
          <h3>–¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å –æ—Ñ—Ñ–µ—Ä</h3>
          <div className="progress-bar-container">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${Math.min(progressToNextRank, 100)}%` }}
              ></div>
            </div>
            <div className="progress-text">
              {Math.round(progressToNextRank)}% ‚Üí –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
            </div>
          </div>
          <div className="progress-details">
            –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: {currentRank?.name} ‚Üí –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
            <br />
            –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å: 0 XP
          </div>
        </div>
      </div>

      <div className="dashboard-content">
        <div className="left-column">
          <div className="competences-section">
            <h3>–ú–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏</h3>
            {userCompetences.map(comp => (
              <div key={comp.id} className="competence-item">
                <div className="competence-name">{comp.name}</div>
                <div className="competence-bar">
                  {getCompetenceBar(comp.level, comp.maxLevel)} {comp.level}/{comp.maxLevel}
                </div>
              </div>
            ))}
            <button className="show-all-btn">[–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏...]</button>
          </div>
        </div>

        <div className="right-column">
          <div className="missions-section">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏</h3>
            
            <div className="mission-branch">
              <h4>–í–µ—Ç–∫–∞: "–†–µ–∫—Ä—É—Ç–∏–Ω–≥"</h4>
              {activeMissions.filter(m => m.branch === '–†–µ–∫—Ä—É—Ç–∏–Ω–≥').map(mission => (
                <div key={mission.id} className="mission-item">
                  <span className="mission-status">{getStatusIcon(mission.status)}</span>
                  <span className="mission-title">[{mission.title}]</span>
                  <span className="mission-reward">+{mission.xp} XP ‚Ä¢ +{mission.mana} –º–∞–Ω—ã</span>
                </div>
              ))}
            </div>

            <div className="mission-branch">
              <h4>–í–µ—Ç–∫–∞: "–û–Ω–±–æ—Ä–¥–∏–Ω–≥"</h4>
              {activeMissions.filter(m => m.branch === '–û–Ω–±–æ—Ä–¥–∏–Ω–≥').map(mission => (
                <div key={mission.id} className="mission-item">
                  <span className="mission-status">{getStatusIcon(mission.status)}</span>
                  <span className="mission-title">[{mission.title}]</span>
                  <span className="mission-reward">+{mission.xp} XP ‚Ä¢ +{mission.mana} –º–∞–Ω—ã</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="dashboard-bottom">
        <div className="goals-section">
          <h3>–ë–ª–∏–∂–∞–π—à–∏–µ —Ü–µ–ª–∏</h3>
          {upcomingGoals.map(goal => (
            <div key={goal.id} className="goal-item">
              <span className="goal-icon">üéØ</span>
              <span className="goal-title">{goal.title}</span>
              <span className="goal-requirement">({goal.requirement})</span>
            </div>
          ))}
        </div>

        <div className="resources-widget">
          <h3>–ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã</h3>
          <div className="resource-item">üí´ –ú–∞–Ω–∞: {user?.mana || 0}</div>
          <div className="resource-item">‚≠ê –û–ø—ã—Ç: {user?.experience || 0}</div>
          <div className="resource-item">üèÜ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {userArtifacts.length}</div>
          <div className="resource-item">üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π: {userStats?.missions_completed || 0}</div>
        </div>

        <div className="activity-log">
          <h3>–ë–æ—Ä—Ç–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª</h3>
          <div className="log-section">
            <h4>–°–µ–≥–æ–¥–Ω—è</h4>
            {userLogs.slice(0, 2).map(log => (
              <div key={log.id} className="log-item">
                <span className="log-time">14:30</span>
                <span className="log-icon">‚úÖ</span>
                <span className="log-description">{log.description}</span>
              </div>
            ))}
          </div>
          <div className="log-section">
            <h4>–í—á–µ—Ä–∞</h4>
            {userLogs.slice(2).map(log => (
              <div key={log.id} className="log-item">
                <span className="log-time">11:40</span>
                <span className="log-icon">üîº</span>
                <span className="log-description">{log.description}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="leaderboard-section">
        <h3>üèÜ –¢–û–ü –∑–∞ –Ω–µ–¥–µ–ª—é:</h3>
        <div className="leaderboard-list">
          {leaderboard.map(player => (
            <div key={player.id} className="leaderboard-item">
              <span className="position">{player.position}.</span>
              <span className="name">{player.name}</span>
              <span className="rank">{player.rank}</span>
              <span className="xp">{player.xp} XP</span>
            </div>
          ))}
          <div className="my-position">[–ú–æ–µ –º–µ—Å—Ç–æ: 15]</div>
        </div>
      </div>

      <div className="stats-achievements-section">
        <UserStats stats={userStats || { 
          missions_completed: 0, 
          artifacts_obtained: 0, 
          competences_maxed: 0, 
          current_rank_progress: 0,
          total_experience: 0,
          total_mana: 0
        }} />
        <Achievements artifacts={userArtifacts} />
      </div>

      <div className="theme-controls-section">
        <ThemeSwitcher showUserCategory={true} />
      </div>
    </div>
  );
};

export default DashboardPage;
