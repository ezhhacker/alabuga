import React, { useState, useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import { useNavigate } from 'react-router-dom';
import './LoginPage.css';

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const { login, user, isLoading: contextLoading } = useAppContext();
  const navigate = useNavigate();

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  useEffect(() => {
    if (!contextLoading && user) {
      console.log('LoginPage: User already logged in, redirecting to home');
      navigate('/');
    }
  }, [user, contextLoading, navigate]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
  if (contextLoading) {
    return (
      <div className="login-page">
        <div className="loading-container">
          <div className="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      await login(email, password);
      navigate('/');
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <h1>üöÄ –°–∏—Å—Ç–µ–º–∞ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏</h1>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
        </div>

        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
            />
          </div>

          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          <button 
            type="submit" 
            className="login-button"
            disabled={isLoading}
          >
            {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>
        </form>

        <div className="login-footer">
          <p>–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</p>
          <div className="test-accounts">
            <div className="test-account">
              <strong>–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong><br />
              Email: test@example.com<br />
              –ü–∞—Ä–æ–ª—å: password
            </div>
            <div className="test-account">
              <strong>HR (–∞–¥–º–∏–Ω):</strong><br />
              Email: hr@example.com<br />
              –ü–∞—Ä–æ–ª—å: password
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
